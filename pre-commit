#!/usr/bin/env php
<?php
    $PROJECT_ROOT = dirname(__DIR__, 2).'/';
    $PHP_BIN = exec('which php');
    $PHPCSFIXER_BIN = exec('which php-cs-fixer');
    $PHPCSFIXER_CONFIG_FILE = getenv('HOME').'/.php_cs.dist';
    $PHP_CS_FIXER_FILE_PATTERN = '/\.(php|twig|yml)$/';
    $options = getopt('i', ['install']);

    if (isset($options['i']) || isset($options['install'])) {
        install();
        echo "Git hook successfully installed" . PHP_EOL;
        exit(1);
    }

    function install() {
        global $PROJECT_ROOT;
        $link = $PROJECT_ROOT . '.git/hooks/pre-commit';
        @unlink($link);
        exec(sprintf('ln -s %s %s', __FILE__, $link));
    }

    function getStashedFiles($filePattern) {
        $against = exec('git rev-parse --verify HEAD') ?: 'HEAD';
        $files = array();
        exec('git diff-index --name-only --cached --diff-filter=ACMR ' . $against . ' --', $files);

        return array_filter($files, function($file) use ($filePattern) {
            return (bool) preg_match($filePattern, $file);
        });
    }

    function runPhpLint() {
        global $PHP_BIN, $PROJECT_ROOT, $PHP_CS_FIXER_FILE_PATTERN;

        $filesWithErrors = [];

        foreach (getStashedFiles($PHP_CS_FIXER_FILE_PATTERN) as $file) {
            $output = '';
            $returnCode = null;
            exec(sprintf('%s -l %s 2>/dev/null', $PHP_BIN, $PROJECT_ROOT . $file), $output, $returnCode);
            if ($returnCode) {
                $filesWithErrors[] = $file;
            }
        }

        return $filesWithErrors;
    }

    function runPhpCsFixer() {
        global $PHPCSFIXER_BIN, $PHP_CS_FIXER_FILE_PATTERN, $PROJECT_ROOT, $PHPCSFIXER_CONFIG_FILE;

        $changedFiles = [];

        foreach (getStashedFiles($PHP_CS_FIXER_FILE_PATTERN) as $file) {
            $output = '';
            $returnCode = null;
            exec(sprintf('%s fix %s --config=%s', $PHPCSFIXER_BIN, $PROJECT_ROOT . $file, $PHPCSFIXER_CONFIG_FILE), $output, $returnCode);
            if ($returnCode) {
                $changedFiles[] = $file;
            }
        }

        return $changedFiles;
    }

    $phpSyntaxErrors = runPhpLint();
    $phpCSErrors = runPhpCsFixer();

    if ($phpSyntaxErrors) {
        echo "\e[31mPHP syntax errors were found in next files:" . PHP_EOL;

        foreach ($phpSyntaxErrors as $error) {
            echo "\t".$error . PHP_EOL;
        }
    }

    if ($phpCSErrors) {
        echo "\e[36mIncorrect coding standards were detected and fixed." . PHP_EOL;
        echo "Please stash changes and run commit again." . PHP_EOL;
        echo "List of changed files:" . PHP_EOL;

        foreach ($phpCSErrors as $error) {
            echo "\t".$error . PHP_EOL;
        }
    }

    $changedFiles = getStashedFiles($PHP_CS_FIXER_FILE_PATTERN);

    if(count($changedFiles) > 0){
        foreach ($changedFiles as $file) {
            exec(sprintf('git add %s', $file));
        }
    }

    exit($phpSyntaxErrors || $phpCSErrors ? 1 : 0);