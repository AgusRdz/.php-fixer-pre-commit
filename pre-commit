#!/usr/bin/env php
<?php
    $projectRoot = dirname(__DIR__, 2)."/";
    $phpBin = exec("which php");
    $phpCsFixerBin = exec("which php-cs-fixer");
    $phpCsFixerConfigFile = getenv("HOME")."/.php_cs.dist";
    $phpCsFixerFilePattern = "/\.(php|twig|yml)$/";
    $options = getopt("i", ["install"]);

    if (isset($options["i"]) || isset($options["install"])) {
        install();
        exit(1);
    }

    /**
     * Make enable the pre-commit hook
     * @return void
     */
    function install() {
        global $projectRoot;
        $link = $projectRoot."/.git/hooks/pre-commit";
        @unlink($link);
        exec(sprintf("ln -s %s %s", __FILE__, $link));
    }

    /**
     * Get all files on stash
     * @param  $filePattern Files to check
     * @return array Files array
     */
    function getStashedFiles($filePattern) {
        $against = exec("git rev-parse --verify HEAD") ?: "HEAD";
        $files = array();
        exec("git diff-index --name-only --cached --diff-filter=ACMR ".$against." --", $files);

        return array_filter($files, function($file) use ($filePattern) {
            return (bool) preg_match($filePattern, $file);
        });
    }

    /**
     * Execute php lint
     * @return array Files with bad sintax
     */
    function runPhpLint() {
        global $phpBin, $projectRoot, $phpCsFixerFilePattern;

        $filesWithErrors = [];

        foreach (getStashedFiles($phpCsFixerFilePattern) as $file) {
            $output = "";
            $returnCode = null;
            exec(sprintf("%s -l %s 2>/dev/null", $phpBin, $projectRoot.$file), $output, $returnCode);
            if ($returnCode) {
                $filesWithErrors[] = $file;
            }
        }

        return $filesWithErrors;
    }

    /**
     * Execute php-cs-fixer using the rules in the config file
     * @return array Fixed files
     */
    function runPhpCsFixer() {
        global $phpCsFixerBin, $phpCsFixerFilePattern, $projectRoot, $phpCsFixerConfigFile;

        $changedFiles = [];

        foreach (getStashedFiles($phpCsFixerFilePattern) as $file) {
            $output = "";
            $returnCode = null;
            exec(sprintf("%s fix %s --config=%s", $phpCsFixerBin, $projectRoot.$file, $phpCsFixerConfigFile), $output, $returnCode);
            if ($returnCode) {
                $changedFiles[] = $file;
            }
        }

        return $changedFiles;
    }

    $phpSyntaxErrors = runPhpLint();
    $phpCSErrors = runPhpCsFixer();

    if ($phpSyntaxErrors) {
        echo "\e[31mPHP syntax errors were found in next files:".PHP_EOL;

        foreach ($phpSyntaxErrors as $error) {
            echo "\t".$error . PHP_EOL;
        }
        exit(1);
    }

    $changedFiles = getStashedFiles($phpCsFixerFilePattern);
    $fixedFiles = count($changedFiles);

    if($fixedFiles >= 0 && $fixedFiles < 5) {
        echo PHP_EOL."\e[1;97;42mGood work, your code standards are under control.\e[0;39;49m".PHP_EOL.PHP_EOL;
    } else {
        echo PHP_EOL."\e[1;97;41mWhooops, ".$fixedFiles." files were fixed!!!\e[0;39;49m".PHP_EOL.PHP_EOL;
    }

    if($fixedFiles > 0){
        foreach ($changedFiles as $file) {
            exec(sprintf("git add %s", $file));
        }
    }

    exit($phpSyntaxErrors || $phpCSErrors ? 1 : 0);